// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: minmax.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinMaxClient is the client API for MinMax service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinMaxClient interface {
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type minMaxClient struct {
	cc grpc.ClientConnInterface
}

func NewMinMaxClient(cc grpc.ClientConnInterface) MinMaxClient {
	return &minMaxClient{cc}
}

func (c *minMaxClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/minmax.MinMax/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinMaxServer is the server API for MinMax service.
// All implementations must embed UnimplementedMinMaxServer
// for forward compatibility
type MinMaxServer interface {
	Find(context.Context, *FindRequest) (*FindResponse, error)
	mustEmbedUnimplementedMinMaxServer()
}

// UnimplementedMinMaxServer must be embedded to have forward compatible implementations.
type UnimplementedMinMaxServer struct {
}

func (UnimplementedMinMaxServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedMinMaxServer) mustEmbedUnimplementedMinMaxServer() {}

// UnsafeMinMaxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinMaxServer will
// result in compilation errors.
type UnsafeMinMaxServer interface {
	mustEmbedUnimplementedMinMaxServer()
}

func RegisterMinMaxServer(s grpc.ServiceRegistrar, srv MinMaxServer) {
	s.RegisterService(&MinMax_ServiceDesc, srv)
}

func _MinMax_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinMaxServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minmax.MinMax/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinMaxServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinMax_ServiceDesc is the grpc.ServiceDesc for MinMax service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinMax_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minmax.MinMax",
	HandlerType: (*MinMaxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _MinMax_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minmax.proto",
}
